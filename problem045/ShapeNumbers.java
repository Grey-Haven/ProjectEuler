package problem045;

import java.util.ArrayList;

/**
 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
 * <br>
 * Triangle	 	T[n]=n(n+1)/2	 	1, 3, 6, 10, 15,  ... <br>
 * Pentagonal	P[n]=n(3n-1)/2		1, 5, 12, 22, 35, ... <br>
 * Hexagonal	H[n]=n(2n-1)	 	1, 6, 15, 28, 45, ... <br>
 * It can be verified that T[285] = P[165] = H[143] = 40755.
 * <br>
 * Find the next triangle number that is also pentagonal and hexagonal.
 * <br>
 * Answer: 1533776805
 * @since Aug 15, 2013 2:50:27 PM
 * @author Stephen White
 *
 */
public class ShapeNumbers {
	
	int findNum;
	
	public ShapeNumbers(){
		this(1);
	}
	
	public ShapeNumbers(int findNum){
		this.findNum = findNum;
	}
	
	public static void main(String [] args){
		
		ShapeNumbers sn = new ShapeNumbers(3);
		sn.run();
		
	}
	
	public void run(){
		
		ArrayList<Long>numShapes = new ArrayList<Long>();
		
		for(long i = 1; ; i+=2){ //According to the enclosed proof, every odd number transformed into a triangle is hexagonal as well.
			if(numShapes.size() == findNum){
				break;
			}
			
			long shapeNum;
			shapeNum = triangle(i);
			if(isPentagonal(shapeNum)){// && isHexagonal(shapeNum)){
		//		if(isHexagonal(shapeNum)){
				System.out.println(i);
				numShapes.add(i);
			//	}
			}
		}
		
		for(int i = 0; i < numShapes.size(); i++){
			System.out.println(numShapes.get(i) + " " + triangle(numShapes.get(i)));
		}
	}
	
	private long triangle(long n){
		return (long) (n*(n+1))/2;
	}
	
	private boolean isPentagonal(long n){
		
		double d = (double) n;
		
		return ((Math.sqrt((24*d) + 1) + 1) / 6) % 1 == 0;
		
	}

}